/**
 * SpreadsheetMLMapToXLSX.java
 *
 * This file was generated by MapForce 2014r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package org.bimserver.cobie.shared.transform.spreadsheetml.xlsx;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;

import java.util.*;

@SuppressWarnings("unused")
public class SpreadsheetMLMapToXLSX extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_SpreadsheetML;
	
		public main(com.altova.mapforce.IMFNode var1_instance_SpreadsheetML)
		{
			this.var1_instance_SpreadsheetML = var1_instance_SpreadsheetML;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			com.altova.mapforce.IEnumerable var2_filter_elements_qname;
			com.altova.mapforce.IEnumerable var3_cond_map;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				var2_filter_elements_qname = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Workbook", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_instance_SpreadsheetML));
				var3_cond_map = new com.altova.functions.Core.SequenceCache((new seq1_cond_map(var2_filter_elements_qname)));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Workbook", ""), (new seq3_join(var3_cond_map)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_cond_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_qname;
	
		public seq1_cond_map(com.altova.mapforce.IEnumerable var1_filter_elements_qname)
		{
			this.var1_filter_elements_qname = var1_filter_elements_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_cond_map closure;
			javax.xml.namespace.QName var2_create_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq1_cond_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_qname))) {state = 0; return false; }
				var2_create_qname = com.altova.functions.Core.createQName("Worksheet", "urn:schemas-microsoft-com:office:spreadsheet");
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(var2_create_qname, (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_qname))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_filter_elements_qname.moveNext()) {state = 4; return false; }
				current = com.altova.functions.Core.createElement(var2_create_qname, (new seq2_join(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq2_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			IEnumerator var2_select_attributes;
			IEnumerator var3_select_children;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createNamespace("z", "#RowsetSchema");
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createNamespace("udc", "http://schemas.microsoft.com/data/udc");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createNamespace("udcs", "http://schemas.microsoft.com/data/udc/soap");
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createNamespace("udcxf", "http://schemas.microsoft.com/data/udc/xmlfile");
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createNamespace("x2", "http://schemas.microsoft.com/office/excel/2003/xml");
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = com.altova.functions.Core.createNamespace("soap-env", "http://schemas.xmlsoap.org/soap/envelope/");
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = com.altova.functions.Core.createNamespace("c", "urn:schemas-microsoft-com:office:component:spreadsheet");
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = com.altova.functions.Core.createNamespace("x", "urn:schemas-microsoft-com:office:excel");
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = com.altova.functions.Core.createNamespace("o", "urn:schemas-microsoft-com:office:office");
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				current = com.altova.functions.Core.createNamespace("rs", "urn:schemas-microsoft-com:rowset");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				current = com.altova.functions.Core.createNamespace("v", "urn:schemas-microsoft-com:vml");
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				current = com.altova.functions.Core.createNamespace("s", "uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882");
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 14;				
				current = com.altova.functions.Core.createNamespace("dt", "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882");
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				var2_select_attributes = (com.altova.functions.Core.selectAttributes(closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 15;				
				if (!var2_select_attributes.moveNext()) {state = 16; return false; }
				current = var2_select_attributes.current();
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 18;				
				var2_select_attributes.close(); var2_select_attributes = null;
				var3_select_children = (com.altova.functions.Core.selectChildren(closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 18;				
				if (!var3_select_children.moveNext()) {state = 19; return false; }
				current = var3_select_children.current();
				pos++;
				return true;
			}
			private boolean moveNext_19() throws Exception {
				state = 0;				
				var3_select_children.close(); var3_select_children = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_select_attributes.close(); var2_select_attributes = null;
				var3_select_children.close(); var3_select_children = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_cond_map;
	
		public seq3_join(com.altova.mapforce.IEnumerable var1_cond_map)
		{
			this.var1_cond_map = var1_cond_map;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			com.altova.mapforce.IEnumerable var2_cond_map;
			IEnumerator var3_filter;
			com.altova.mapforce.IEnumerable var4_cond_map;
			IEnumerator var5_result;
			IEnumerator var6_current;
			com.altova.mapforce.IEnumerable var7_cond_map;
			IEnumerator var8_result;
			IEnumerator var9_current;
			com.altova.mapforce.IEnumerable var10_cond_map;
			IEnumerator var11_result;
			IEnumerator var12_current;
			com.altova.mapforce.IEnumerable var13_cond_map;
			IEnumerator var14_result;
			IEnumerator var15_current;
			com.altova.mapforce.IEnumerable var16_cond_map;
			IEnumerator var17_result;
			IEnumerator var18_current;
			com.altova.mapforce.IEnumerable var19_cond_map;
			IEnumerator var20_result;
			IEnumerator var21_current;
			com.altova.mapforce.IEnumerable var22_cond_map;
			IEnumerator var23_result;
			IEnumerator var24_current;
			com.altova.mapforce.IEnumerable var25_cond_map;
			IEnumerator var26_result;
			IEnumerator var27_current;
			com.altova.mapforce.IEnumerable var28_cond_map;
			IEnumerator var29_result;
			IEnumerator var30_current;
			com.altova.mapforce.IEnumerable var31_cond_map;
			IEnumerator var32_result;
			IEnumerator var33_current;
			com.altova.mapforce.IEnumerable var34_cond_map;
			IEnumerator var35_result;
			IEnumerator var36_current;
			com.altova.mapforce.IEnumerable var37_cond_map;
			IEnumerator var38_result;
			IEnumerator var39_current;
			com.altova.mapforce.IEnumerable var40_cond_map;
			IEnumerator var41_result;
			IEnumerator var42_current;
			com.altova.mapforce.IEnumerable var43_cond_map;
			IEnumerator var44_result;
			IEnumerator var45_current;
			com.altova.mapforce.IEnumerable var46_cond_map;
			IEnumerator var47_result;
			IEnumerator var48_current;
			com.altova.mapforce.IEnumerable var49_cond_map;
			IEnumerator var50_result;
			IEnumerator var51_current;
			com.altova.mapforce.IEnumerable var52_cond_map;
			IEnumerator var53_result;
			IEnumerator var54_current;
			com.altova.mapforce.IEnumerable var55_cond_map;
			IEnumerator var56_result;
			IEnumerator var57_current;
			com.altova.mapforce.IEnumerable var58_cond_map;
			IEnumerator var59_result;
			IEnumerator var60_current;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
					case 46:	if (moveNext_46()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 57:	if (moveNext_57()) return true; break;
					case 58:	if (moveNext_58()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
					case 61:	if (moveNext_61()) return true; break;
					case 62:	if (moveNext_62()) return true; break;
					case 63:	if (moveNext_63()) return true; break;
					case 65:	if (moveNext_65()) return true; break;
					case 66:	if (moveNext_66()) return true; break;
					case 67:	if (moveNext_67()) return true; break;
					case 68:	if (moveNext_68()) return true; break;
					case 70:	if (moveNext_70()) return true; break;
					case 71:	if (moveNext_71()) return true; break;
					case 72:	if (moveNext_72()) return true; break;
					case 73:	if (moveNext_73()) return true; break;
					case 75:	if (moveNext_75()) return true; break;
					case 76:	if (moveNext_76()) return true; break;
					case 77:	if (moveNext_77()) return true; break;
					case 78:	if (moveNext_78()) return true; break;
					case 80:	if (moveNext_80()) return true; break;
					case 81:	if (moveNext_81()) return true; break;
					case 82:	if (moveNext_82()) return true; break;
					case 83:	if (moveNext_83()) return true; break;
					case 85:	if (moveNext_85()) return true; break;
					case 86:	if (moveNext_86()) return true; break;
					case 87:	if (moveNext_87()) return true; break;
					case 88:	if (moveNext_88()) return true; break;
					case 90:	if (moveNext_90()) return true; break;
					case 91:	if (moveNext_91()) return true; break;
					case 92:	if (moveNext_92()) return true; break;
					case 93:	if (moveNext_93()) return true; break;
					case 95:	if (moveNext_95()) return true; break;
					case 96:	if (moveNext_96()) return true; break;
					case 97:	if (moveNext_97()) return true; break;
					case 98:	if (moveNext_98()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var3_filter = ((new seq4_filter(var2_cond_map))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq9_join(((com.altova.mapforce.IMFNode)(var3_filter.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_filter.close(); var3_filter = null;
				var4_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var5_result = (var4_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var5_result.moveNext()) {state = 6; return false; }
				var6_current = ((new seq12_cond_cond_box(((com.altova.mapforce.IMFNode)(var5_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 10;				
				var5_result.close(); var5_result = null;
				var7_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var8_result = (var7_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var6_current.moveNext()) {state = 8; return false; }
				current = var6_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				var6_current.close(); var6_current = null;
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 12;				
				if (!var8_result.moveNext()) {state = 11; return false; }
				var9_current = ((new seq22_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var8_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 15;				
				var8_result.close(); var8_result = null;
				var10_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var11_result = (var10_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 12;				
				if (!var9_current.moveNext()) {state = 13; return false; }
				current = var9_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 10;				
				var9_current.close(); var9_current = null;
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if (!var11_result.moveNext()) {state = 16; return false; }
				var12_current = ((new seq35_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var11_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 20;				
				var11_result.close(); var11_result = null;
				var13_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var14_result = (var13_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 17;				
				if (!var12_current.moveNext()) {state = 18; return false; }
				current = var12_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 15;				
				var12_current.close(); var12_current = null;
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 22;				
				if (!var14_result.moveNext()) {state = 21; return false; }
				var15_current = ((new seq51_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var14_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 25;				
				var14_result.close(); var14_result = null;
				var16_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var17_result = (var16_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 22;				
				if (!var15_current.moveNext()) {state = 23; return false; }
				current = var15_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_23() throws Exception {
				state = 20;				
				var15_current.close(); var15_current = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 27;				
				if (!var17_result.moveNext()) {state = 26; return false; }
				var18_current = ((new seq70_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var17_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 30;				
				var17_result.close(); var17_result = null;
				var19_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var20_result = (var19_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 27;				
				if (!var18_current.moveNext()) {state = 28; return false; }
				current = var18_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_28() throws Exception {
				state = 25;				
				var18_current.close(); var18_current = null;
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 32;				
				if (!var20_result.moveNext()) {state = 31; return false; }
				var21_current = ((new seq92_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var20_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 35;				
				var20_result.close(); var20_result = null;
				var22_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var23_result = (var22_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 32;				
				if (!var21_current.moveNext()) {state = 33; return false; }
				current = var21_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_33() throws Exception {
				state = 30;				
				var21_current.close(); var21_current = null;
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 37;				
				if (!var23_result.moveNext()) {state = 36; return false; }
				var24_current = ((new seq117_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var23_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 40;				
				var23_result.close(); var23_result = null;
				var25_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var26_result = (var25_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_37() throws Exception {
				state = 37;				
				if (!var24_current.moveNext()) {state = 38; return false; }
				current = var24_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_38() throws Exception {
				state = 35;				
				var24_current.close(); var24_current = null;
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 42;				
				if (!var26_result.moveNext()) {state = 41; return false; }
				var27_current = ((new seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var26_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 45;				
				var26_result.close(); var26_result = null;
				var28_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var29_result = (var28_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 42;				
				if (!var27_current.moveNext()) {state = 43; return false; }
				current = var27_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_43() throws Exception {
				state = 40;				
				var27_current.close(); var27_current = null;
				return false;
			}
			private boolean moveNext_45() throws Exception {
				state = 47;				
				if (!var29_result.moveNext()) {state = 46; return false; }
				var30_current = ((new seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var29_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_46() throws Exception {
				state = 50;				
				var29_result.close(); var29_result = null;
				var31_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var32_result = (var31_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 47;				
				if (!var30_current.moveNext()) {state = 48; return false; }
				current = var30_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_48() throws Exception {
				state = 45;				
				var30_current.close(); var30_current = null;
				return false;
			}
			private boolean moveNext_50() throws Exception {
				state = 52;				
				if (!var32_result.moveNext()) {state = 51; return false; }
				var33_current = ((new seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var32_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_51() throws Exception {
				state = 55;				
				var32_result.close(); var32_result = null;
				var34_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var35_result = (var34_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_52() throws Exception {
				state = 52;				
				if (!var33_current.moveNext()) {state = 53; return false; }
				current = var33_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_53() throws Exception {
				state = 50;				
				var33_current.close(); var33_current = null;
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 57;				
				if (!var35_result.moveNext()) {state = 56; return false; }
				var36_current = ((new seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var35_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_56() throws Exception {
				state = 60;				
				var35_result.close(); var35_result = null;
				var37_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var38_result = (var37_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_57() throws Exception {
				state = 57;				
				if (!var36_current.moveNext()) {state = 58; return false; }
				current = var36_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_58() throws Exception {
				state = 55;				
				var36_current.close(); var36_current = null;
				return false;
			}
			private boolean moveNext_60() throws Exception {
				state = 62;				
				if (!var38_result.moveNext()) {state = 61; return false; }
				var39_current = ((new seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var38_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_61() throws Exception {
				state = 65;				
				var38_result.close(); var38_result = null;
				var40_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var41_result = (var40_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_62() throws Exception {
				state = 62;				
				if (!var39_current.moveNext()) {state = 63; return false; }
				current = var39_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_63() throws Exception {
				state = 60;				
				var39_current.close(); var39_current = null;
				return false;
			}
			private boolean moveNext_65() throws Exception {
				state = 67;				
				if (!var41_result.moveNext()) {state = 66; return false; }
				var42_current = ((new seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var41_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_66() throws Exception {
				state = 70;				
				var41_result.close(); var41_result = null;
				var43_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var44_result = (var43_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_67() throws Exception {
				state = 67;				
				if (!var42_current.moveNext()) {state = 68; return false; }
				current = var42_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_68() throws Exception {
				state = 65;				
				var42_current.close(); var42_current = null;
				return false;
			}
			private boolean moveNext_70() throws Exception {
				state = 72;				
				if (!var44_result.moveNext()) {state = 71; return false; }
				var45_current = ((new seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var44_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_71() throws Exception {
				state = 75;				
				var44_result.close(); var44_result = null;
				var46_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var47_result = (var46_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_72() throws Exception {
				state = 72;				
				if (!var45_current.moveNext()) {state = 73; return false; }
				current = var45_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_73() throws Exception {
				state = 70;				
				var45_current.close(); var45_current = null;
				return false;
			}
			private boolean moveNext_75() throws Exception {
				state = 77;				
				if (!var47_result.moveNext()) {state = 76; return false; }
				var48_current = ((new seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var47_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_76() throws Exception {
				state = 80;				
				var47_result.close(); var47_result = null;
				var49_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var50_result = (var49_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_77() throws Exception {
				state = 77;				
				if (!var48_current.moveNext()) {state = 78; return false; }
				current = var48_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_78() throws Exception {
				state = 75;				
				var48_current.close(); var48_current = null;
				return false;
			}
			private boolean moveNext_80() throws Exception {
				state = 82;				
				if (!var50_result.moveNext()) {state = 81; return false; }
				var51_current = ((new seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var50_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_81() throws Exception {
				state = 85;				
				var50_result.close(); var50_result = null;
				var52_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var53_result = (var52_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_82() throws Exception {
				state = 82;				
				if (!var51_current.moveNext()) {state = 83; return false; }
				current = var51_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_83() throws Exception {
				state = 80;				
				var51_current.close(); var51_current = null;
				return false;
			}
			private boolean moveNext_85() throws Exception {
				state = 87;				
				if (!var53_result.moveNext()) {state = 86; return false; }
				var54_current = ((new seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var53_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_86() throws Exception {
				state = 90;				
				var53_result.close(); var53_result = null;
				var55_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var56_result = (var55_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_87() throws Exception {
				state = 87;				
				if (!var54_current.moveNext()) {state = 88; return false; }
				current = var54_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_88() throws Exception {
				state = 85;				
				var54_current.close(); var54_current = null;
				return false;
			}
			private boolean moveNext_90() throws Exception {
				state = 92;				
				if (!var56_result.moveNext()) {state = 91; return false; }
				var57_current = ((new seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var56_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_91() throws Exception {
				state = 95;				
				var56_result.close(); var56_result = null;
				var58_cond_map = new com.altova.functions.Core.SequenceCache(closure.var1_cond_map);
				var59_result = (var58_cond_map).enumerator();
				return false;
			}
			private boolean moveNext_92() throws Exception {
				state = 92;				
				if (!var57_current.moveNext()) {state = 93; return false; }
				current = var57_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_93() throws Exception {
				state = 90;				
				var57_current.close(); var57_current = null;
				return false;
			}
			private boolean moveNext_95() throws Exception {
				state = 97;				
				if (!var59_result.moveNext()) {state = 96; return false; }
				var60_current = ((new seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(((com.altova.mapforce.IMFNode)(var59_result.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_96() throws Exception {
				state = 0;				
				var59_result.close(); var59_result = null;
				return false;
			}
			private boolean moveNext_97() throws Exception {
				state = 97;				
				if (!var60_current.moveNext()) {state = 98; return false; }
				current = var60_current.current();
				pos++;
				return true;
			}
			private boolean moveNext_98() throws Exception {
				state = 95;				
				var60_current.close(); var60_current = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				var6_current.close(); var6_current = null;
				var5_result.close(); var5_result = null;
				var9_current.close(); var9_current = null;
				var8_result.close(); var8_result = null;
				var12_current.close(); var12_current = null;
				var11_result.close(); var11_result = null;
				var15_current.close(); var15_current = null;
				var14_result.close(); var14_result = null;
				var18_current.close(); var18_current = null;
				var17_result.close(); var17_result = null;
				var21_current.close(); var21_current = null;
				var20_result.close(); var20_result = null;
				var24_current.close(); var24_current = null;
				var23_result.close(); var23_result = null;
				var27_current.close(); var27_current = null;
				var26_result.close(); var26_result = null;
				var30_current.close(); var30_current = null;
				var29_result.close(); var29_result = null;
				var33_current.close(); var33_current = null;
				var32_result.close(); var32_result = null;
				var36_current.close(); var36_current = null;
				var35_result.close(); var35_result = null;
				var39_current.close(); var39_current = null;
				var38_result.close(); var38_result = null;
				var42_current.close(); var42_current = null;
				var41_result.close(); var41_result = null;
				var45_current.close(); var45_current = null;
				var44_result.close(); var44_result = null;
				var48_current.close(); var48_current = null;
				var47_result.close(); var47_result = null;
				var51_current.close(); var51_current = null;
				var50_result.close(); var50_result = null;
				var54_current.close(); var54_current = null;
				var53_result.close(); var53_result = null;
				var57_current.close(); var57_current = null;
				var56_result.close(); var56_result = null;
				var60_current.close(); var60_current = null;
				var59_result.close(); var59_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq4_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_filter closure;
			IEnumerator var2_map;
			com.altova.mapforce.IEnumerable var3_cond_box;
			public Enumerator(seq4_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_map = ((new seq5_map(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_map.moveNext()) {state = 3; return false; }
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq6_cond_box(((com.altova.mapforce.IMFNode)(var2_map.current())))));
				if (!(com.altova.functions.Core.exists((new seq7_map(var3_cond_box))))) {state = 2; return false; }
				current = var2_map.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_map.close(); var2_map = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_map.close(); var2_map = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq5_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_map closure;
			IEnumerator var2_result;
			public Enumerator(seq5_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq6_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_cond_box closure;
			public Enumerator(seq6_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq7_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq7_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq8_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq8_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq8_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq9_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq9_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Instruction"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq10_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq10_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq10_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq11_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq11_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_join closure;
			public Enumerator(seq11_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq12_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			public Enumerator(seq12_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq13_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq14_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq16_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq17_map(var3_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq19_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq12_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq12_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq12_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq13_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq13_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_cond_box closure;
			public Enumerator(seq13_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq14_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq14_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq15_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq15_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq15_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq16_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_cond_box closure;
			public Enumerator(seq16_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq17_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq17_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq18_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq18_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq18_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq19_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq19_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Contact"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq20_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq20_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq20_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq21_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq21_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_join closure;
			public Enumerator(seq21_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq22_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			public Enumerator(seq22_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq23_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq24_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq26_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq27_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq29_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq30_map(var4_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq32_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq22_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq22_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq22_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq23_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq23_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_cond_box closure;
			public Enumerator(seq23_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq24_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq24_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq25_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq25_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq25_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq26_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_cond_box closure;
			public Enumerator(seq26_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq27_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq27_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq28_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq28_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq28_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq29_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_cond_box closure;
			public Enumerator(seq29_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq30_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq30_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq31_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq31_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq31_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq32_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq32_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Facility"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq33_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq33_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq33_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq34_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq34_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_join closure;
			public Enumerator(seq34_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq35_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			public Enumerator(seq35_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq36_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq37_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq39_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq40_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq42_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq43_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq45_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq46_map(var5_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq48_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq35_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq35_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq35_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq36_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq36_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_cond_box closure;
			public Enumerator(seq36_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq37_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq37_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq38_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq38_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq38_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq38_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq38_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq39_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq39_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq39_cond_box closure;
			public Enumerator(seq39_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq40_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq40_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq40_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq40_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq41_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq41_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq41_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq41_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq41_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq42_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq42_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq42_cond_box closure;
			public Enumerator(seq42_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq43_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq43_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq43_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq43_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq44_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq44_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq44_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq44_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq44_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq45_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq45_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq45_cond_box closure;
			public Enumerator(seq45_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq46_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq46_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq46_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq46_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq47_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq47_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq47_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq47_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq47_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq48_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq48_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq48_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq48_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Floor"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq49_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq49_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq49_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq49_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq49_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq50_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq50_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq50_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq50_join closure;
			public Enumerator(seq50_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq51_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq51_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq51_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			public Enumerator(seq51_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq52_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq53_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq55_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq56_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq58_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq59_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq61_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq62_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq64_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq65_map(var6_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq67_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq51_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq51_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq51_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq52_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq52_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq52_cond_box closure;
			public Enumerator(seq52_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq53_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq53_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq53_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq53_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq54_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq54_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq54_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq54_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq54_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq55_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq55_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq55_cond_box closure;
			public Enumerator(seq55_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq56_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq56_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq56_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq56_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq57_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq57_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq57_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq57_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq57_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq58_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq58_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq58_cond_box closure;
			public Enumerator(seq58_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq59_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq59_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq59_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq59_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq60_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq60_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq60_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq60_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq60_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq61_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq61_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq61_cond_box closure;
			public Enumerator(seq61_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq62_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq62_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq62_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq62_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq63_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq63_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq63_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq63_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq63_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq64_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq64_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq64_cond_box closure;
			public Enumerator(seq64_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq65_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq65_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq65_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq65_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq66_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq66_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq66_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq66_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq66_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq67_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq67_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq67_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq67_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Space"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq68_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq68_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq68_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq68_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq68_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq69_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq69_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq69_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq69_join closure;
			public Enumerator(seq69_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq70_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq70_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq70_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			public Enumerator(seq70_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq71_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq72_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq74_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq75_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq77_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq78_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq80_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq81_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq83_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq84_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq86_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq87_map(var7_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq89_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq70_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq70_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq70_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq71_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq71_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq71_cond_box closure;
			public Enumerator(seq71_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq72_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq72_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq72_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq72_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq73_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq73_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq73_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq73_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq73_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq74_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq74_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq74_cond_box closure;
			public Enumerator(seq74_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq75_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq75_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq75_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq75_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq76_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq76_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq76_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq76_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq76_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq77_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq77_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq77_cond_box closure;
			public Enumerator(seq77_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq78_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq78_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq78_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq78_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq79_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq79_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq79_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq79_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq79_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq80_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq80_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq80_cond_box closure;
			public Enumerator(seq80_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq81_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq81_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq81_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq81_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq82_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq82_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq82_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq82_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq82_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq83_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq83_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq83_cond_box closure;
			public Enumerator(seq83_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq84_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq84_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq84_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq84_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq85_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq85_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq85_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq85_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq85_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq86_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq86_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq86_cond_box closure;
			public Enumerator(seq86_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq87_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq87_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq87_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq87_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq88_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq88_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq88_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq88_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq88_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq89_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq89_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq89_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq89_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Zone"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq90_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq90_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq90_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq90_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq90_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq91_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq91_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq91_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq91_join closure;
			public Enumerator(seq91_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq92_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq92_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq92_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			public Enumerator(seq92_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq93_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq94_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq96_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq97_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq99_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq100_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq102_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq103_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq105_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq106_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq108_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq109_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq111_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq112_map(var8_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq114_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq92_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq92_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq92_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq93_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq93_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq93_cond_box closure;
			public Enumerator(seq93_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq94_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq94_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq94_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq94_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq95_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq95_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq95_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq95_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq95_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq96_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq96_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq96_cond_box closure;
			public Enumerator(seq96_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq97_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq97_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq97_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq97_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq98_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq98_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq98_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq98_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq98_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq99_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq99_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq99_cond_box closure;
			public Enumerator(seq99_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq100_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq100_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq100_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq100_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq101_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq101_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq101_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq101_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq101_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq102_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq102_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq102_cond_box closure;
			public Enumerator(seq102_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq103_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq103_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq103_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq103_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq104_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq104_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq104_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq104_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq104_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq105_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq105_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq105_cond_box closure;
			public Enumerator(seq105_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq106_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq106_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq106_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq106_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq107_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq107_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq107_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq107_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq107_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq108_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq108_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq108_cond_box closure;
			public Enumerator(seq108_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq109_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq109_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq109_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq109_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq110_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq110_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq110_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq110_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq110_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq111_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq111_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq111_cond_box closure;
			public Enumerator(seq111_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq112_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq112_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq112_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq112_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq113_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq113_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq113_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq113_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq113_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq114_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq114_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq114_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq114_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Type"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq115_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq115_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq115_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq115_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq115_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq116_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq116_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq116_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq116_join closure;
			public Enumerator(seq116_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq117_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq117_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq117_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			public Enumerator(seq117_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq118_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq119_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq121_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq122_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq124_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq125_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq127_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq128_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq130_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq131_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq133_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq134_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq136_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq137_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq139_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq140_map(var9_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq142_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq117_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq117_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq117_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq118_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq118_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq118_cond_box closure;
			public Enumerator(seq118_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq119_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq119_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq119_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq119_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq120_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq120_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq120_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq120_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq120_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq121_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq121_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq121_cond_box closure;
			public Enumerator(seq121_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq122_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq122_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq122_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq122_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq123_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq123_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq123_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq123_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq123_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq124_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq124_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq124_cond_box closure;
			public Enumerator(seq124_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq125_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq125_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq125_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq125_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq126_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq126_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq126_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq126_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq126_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq127_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq127_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq127_cond_box closure;
			public Enumerator(seq127_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq128_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq128_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq128_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq128_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq129_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq129_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq129_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq129_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq129_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq130_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq130_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq130_cond_box closure;
			public Enumerator(seq130_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq131_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq131_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq131_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq131_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq132_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq132_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq132_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq132_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq132_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq133_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq133_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq133_cond_box closure;
			public Enumerator(seq133_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq134_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq134_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq134_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq134_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq135_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq135_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq135_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq135_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq135_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq136_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq136_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq136_cond_box closure;
			public Enumerator(seq136_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq137_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq137_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq137_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq137_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq138_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq138_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq138_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq138_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq138_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq139_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq139_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq139_cond_box closure;
			public Enumerator(seq139_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq140_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq140_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq140_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq140_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq141_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq141_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq141_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq141_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq141_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq142_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq142_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq142_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq142_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Component"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq143_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq143_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq143_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq143_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq143_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq144_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq144_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq144_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq144_join closure;
			public Enumerator(seq144_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			public Enumerator(seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq146_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq147_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq149_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq150_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq152_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq153_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq155_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq156_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq158_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq159_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq161_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq162_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq164_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq165_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq167_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq168_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq170_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq171_map(var10_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq173_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq145_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq146_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq146_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq146_cond_box closure;
			public Enumerator(seq146_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq147_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq147_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq147_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq147_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq148_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq148_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq148_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq148_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq148_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq149_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq149_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq149_cond_box closure;
			public Enumerator(seq149_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq150_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq150_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq150_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq150_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq151_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq151_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq151_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq151_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq151_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq152_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq152_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq152_cond_box closure;
			public Enumerator(seq152_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq153_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq153_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq153_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq153_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq154_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq154_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq154_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq154_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq154_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq155_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq155_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq155_cond_box closure;
			public Enumerator(seq155_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq156_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq156_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq156_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq156_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq157_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq157_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq157_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq157_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq157_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq158_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq158_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq158_cond_box closure;
			public Enumerator(seq158_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq159_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq159_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq159_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq159_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq160_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq160_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq160_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq160_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq160_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq161_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq161_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq161_cond_box closure;
			public Enumerator(seq161_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq162_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq162_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq162_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq162_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq163_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq163_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq163_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq163_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq163_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq164_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq164_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq164_cond_box closure;
			public Enumerator(seq164_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq165_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq165_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq165_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq165_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq166_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq166_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq166_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq166_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq166_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq167_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq167_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq167_cond_box closure;
			public Enumerator(seq167_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq168_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq168_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq168_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq168_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq169_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq169_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq169_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq169_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq169_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq170_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq170_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq170_cond_box closure;
			public Enumerator(seq170_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq171_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq171_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq171_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq171_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq172_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq172_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq172_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq172_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq172_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq173_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq173_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq173_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq173_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("System"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq174_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq174_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq174_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq174_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq174_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq175_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq175_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq175_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq175_join closure;
			public Enumerator(seq175_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			public Enumerator(seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq177_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq178_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq180_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq181_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq183_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq184_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq186_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq187_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq189_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq190_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq192_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq193_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq195_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq196_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq198_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq199_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq201_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq202_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq204_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq205_map(var11_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq207_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq176_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq177_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq177_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq177_cond_box closure;
			public Enumerator(seq177_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq178_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq178_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq178_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq178_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq179_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq179_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq179_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq179_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq179_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq180_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq180_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq180_cond_box closure;
			public Enumerator(seq180_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq181_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq181_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq181_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq181_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq182_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq182_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq182_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq182_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq182_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq183_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq183_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq183_cond_box closure;
			public Enumerator(seq183_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq184_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq184_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq184_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq184_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq185_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq185_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq185_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq185_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq185_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq186_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq186_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq186_cond_box closure;
			public Enumerator(seq186_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq187_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq187_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq187_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq187_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq188_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq188_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq188_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq188_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq188_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq189_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq189_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq189_cond_box closure;
			public Enumerator(seq189_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq190_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq190_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq190_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq190_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq191_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq191_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq191_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq191_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq191_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq192_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq192_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq192_cond_box closure;
			public Enumerator(seq192_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq193_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq193_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq193_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq193_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq194_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq194_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq194_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq194_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq194_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq195_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq195_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq195_cond_box closure;
			public Enumerator(seq195_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq196_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq196_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq196_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq196_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq197_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq197_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq197_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq197_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq197_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq198_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq198_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq198_cond_box closure;
			public Enumerator(seq198_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq199_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq199_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq199_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq199_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq200_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq200_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq200_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq200_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq200_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq201_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq201_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq201_cond_box closure;
			public Enumerator(seq201_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq202_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq202_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq202_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq202_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq203_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq203_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq203_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq203_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq203_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq204_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq204_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq204_cond_box closure;
			public Enumerator(seq204_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq205_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq205_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq205_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq205_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq206_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq206_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq206_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq206_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq206_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq207_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq207_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq207_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq207_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Assembly"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq208_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq208_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq208_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq208_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq208_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq209_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq209_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq209_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq209_join closure;
			public Enumerator(seq209_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			public Enumerator(seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq211_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq212_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq214_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq215_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq217_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq218_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq220_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq221_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq223_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq224_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq226_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq227_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq229_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq230_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq232_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq233_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq235_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq236_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq238_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq239_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq241_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq242_map(var12_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq244_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq210_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq211_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq211_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq211_cond_box closure;
			public Enumerator(seq211_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq212_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq212_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq212_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq212_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq213_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq213_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq213_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq213_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq213_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq214_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq214_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq214_cond_box closure;
			public Enumerator(seq214_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq215_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq215_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq215_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq215_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq216_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq216_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq216_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq216_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq216_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq217_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq217_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq217_cond_box closure;
			public Enumerator(seq217_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq218_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq218_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq218_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq218_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq219_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq219_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq219_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq219_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq219_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq220_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq220_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq220_cond_box closure;
			public Enumerator(seq220_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq221_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq221_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq221_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq221_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq222_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq222_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq222_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq222_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq222_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq223_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq223_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq223_cond_box closure;
			public Enumerator(seq223_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq224_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq224_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq224_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq224_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq225_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq225_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq225_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq225_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq225_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq226_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq226_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq226_cond_box closure;
			public Enumerator(seq226_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq227_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq227_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq227_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq227_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq228_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq228_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq228_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq228_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq228_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq229_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq229_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq229_cond_box closure;
			public Enumerator(seq229_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq230_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq230_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq230_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq230_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq231_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq231_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq231_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq231_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq231_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq232_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq232_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq232_cond_box closure;
			public Enumerator(seq232_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq233_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq233_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq233_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq233_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq234_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq234_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq234_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq234_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq234_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq235_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq235_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq235_cond_box closure;
			public Enumerator(seq235_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq236_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq236_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq236_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq236_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq237_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq237_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq237_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq237_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq237_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq238_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq238_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq238_cond_box closure;
			public Enumerator(seq238_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq239_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq239_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq239_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq239_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq240_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq240_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq240_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq240_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq240_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq241_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq241_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq241_cond_box closure;
			public Enumerator(seq241_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq242_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq242_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq242_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq242_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq243_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq243_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq243_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq243_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq243_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq244_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq244_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq244_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq244_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Connection"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq245_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq245_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq245_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq245_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq245_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq246_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq246_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq246_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq246_join closure;
			public Enumerator(seq246_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			public Enumerator(seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq248_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq249_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq251_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq252_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq254_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq255_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq257_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq258_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq260_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq261_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq263_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq264_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq266_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq267_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq269_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq270_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq272_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq273_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq275_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq276_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq278_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq279_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq281_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq282_map(var13_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq284_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq247_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq248_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq248_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq248_cond_box closure;
			public Enumerator(seq248_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq249_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq249_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq249_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq249_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq250_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq250_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq250_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq250_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq250_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq251_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq251_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq251_cond_box closure;
			public Enumerator(seq251_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq252_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq252_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq252_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq252_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq253_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq253_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq253_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq253_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq253_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq254_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq254_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq254_cond_box closure;
			public Enumerator(seq254_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq255_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq255_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq255_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq255_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq256_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq256_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq256_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq256_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq256_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq257_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq257_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq257_cond_box closure;
			public Enumerator(seq257_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq258_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq258_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq258_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq258_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq259_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq259_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq259_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq259_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq259_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq260_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq260_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq260_cond_box closure;
			public Enumerator(seq260_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq261_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq261_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq261_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq261_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq262_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq262_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq262_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq262_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq262_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq263_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq263_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq263_cond_box closure;
			public Enumerator(seq263_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq264_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq264_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq264_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq264_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq265_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq265_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq265_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq265_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq265_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq266_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq266_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq266_cond_box closure;
			public Enumerator(seq266_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq267_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq267_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq267_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq267_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq268_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq268_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq268_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq268_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq268_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq269_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq269_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq269_cond_box closure;
			public Enumerator(seq269_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq270_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq270_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq270_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq270_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq271_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq271_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq271_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq271_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq271_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq272_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq272_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq272_cond_box closure;
			public Enumerator(seq272_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq273_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq273_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq273_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq273_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq274_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq274_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq274_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq274_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq274_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq275_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq275_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq275_cond_box closure;
			public Enumerator(seq275_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq276_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq276_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq276_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq276_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq277_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq277_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq277_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq277_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq277_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq278_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq278_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq278_cond_box closure;
			public Enumerator(seq278_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq279_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq279_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq279_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq279_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq280_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq280_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq280_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq280_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq280_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq281_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq281_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq281_cond_box closure;
			public Enumerator(seq281_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq282_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq282_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq282_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq282_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq283_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq283_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq283_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq283_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq283_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq284_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq284_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq284_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq284_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Spare"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq285_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq285_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq285_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq285_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq285_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq286_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq286_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq286_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq286_join closure;
			public Enumerator(seq286_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			public Enumerator(seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq288_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq289_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq291_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq292_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq294_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq295_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq297_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq298_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq300_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq301_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq303_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq304_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq306_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq307_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq309_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq310_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq312_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq313_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq315_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq316_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq318_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq319_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq321_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq322_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq324_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq325_map(var14_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq327_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq287_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq288_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq288_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq288_cond_box closure;
			public Enumerator(seq288_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq289_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq289_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq289_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq289_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq290_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq290_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq290_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq290_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq290_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq291_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq291_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq291_cond_box closure;
			public Enumerator(seq291_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq292_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq292_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq292_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq292_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq293_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq293_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq293_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq293_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq293_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq294_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq294_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq294_cond_box closure;
			public Enumerator(seq294_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq295_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq295_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq295_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq295_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq296_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq296_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq296_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq296_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq296_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq297_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq297_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq297_cond_box closure;
			public Enumerator(seq297_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq298_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq298_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq298_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq298_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq299_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq299_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq299_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq299_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq299_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq300_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq300_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq300_cond_box closure;
			public Enumerator(seq300_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq301_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq301_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq301_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq301_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq302_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq302_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq302_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq302_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq302_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq303_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq303_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq303_cond_box closure;
			public Enumerator(seq303_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq304_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq304_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq304_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq304_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq305_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq305_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq305_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq305_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq305_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq306_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq306_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq306_cond_box closure;
			public Enumerator(seq306_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq307_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq307_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq307_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq307_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq308_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq308_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq308_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq308_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq308_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq309_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq309_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq309_cond_box closure;
			public Enumerator(seq309_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq310_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq310_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq310_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq310_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq311_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq311_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq311_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq311_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq311_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq312_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq312_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq312_cond_box closure;
			public Enumerator(seq312_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq313_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq313_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq313_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq313_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq314_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq314_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq314_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq314_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq314_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq315_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq315_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq315_cond_box closure;
			public Enumerator(seq315_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq316_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq316_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq316_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq316_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq317_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq317_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq317_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq317_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq317_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq318_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq318_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq318_cond_box closure;
			public Enumerator(seq318_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq319_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq319_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq319_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq319_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq320_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq320_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq320_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq320_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq320_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq321_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq321_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq321_cond_box closure;
			public Enumerator(seq321_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq322_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq322_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq322_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq322_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq323_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq323_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq323_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq323_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq323_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq324_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq324_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq324_cond_box closure;
			public Enumerator(seq324_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq325_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq325_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq325_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq325_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq326_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq326_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq326_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq326_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq326_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq327_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq327_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq327_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq327_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Resource"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq328_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq328_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq328_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq328_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq328_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq329_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq329_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq329_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq329_join closure;
			public Enumerator(seq329_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			public Enumerator(seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq331_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq332_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq334_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq335_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq337_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq338_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq340_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq341_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq343_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq344_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq346_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq347_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq349_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq350_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq352_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq353_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq355_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq356_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq358_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq359_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq361_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq362_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq364_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq365_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq367_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq368_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq370_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq371_map(var15_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq373_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq330_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq331_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq331_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq331_cond_box closure;
			public Enumerator(seq331_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq332_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq332_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq332_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq332_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq333_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq333_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq333_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq333_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq333_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq334_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq334_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq334_cond_box closure;
			public Enumerator(seq334_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq335_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq335_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq335_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq335_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq336_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq336_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq336_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq336_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq336_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq337_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq337_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq337_cond_box closure;
			public Enumerator(seq337_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq338_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq338_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq338_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq338_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq339_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq339_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq339_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq339_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq339_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq340_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq340_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq340_cond_box closure;
			public Enumerator(seq340_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq341_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq341_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq341_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq341_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq342_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq342_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq342_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq342_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq342_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq343_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq343_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq343_cond_box closure;
			public Enumerator(seq343_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq344_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq344_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq344_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq344_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq345_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq345_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq345_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq345_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq345_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq346_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq346_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq346_cond_box closure;
			public Enumerator(seq346_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq347_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq347_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq347_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq347_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq348_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq348_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq348_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq348_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq348_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq349_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq349_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq349_cond_box closure;
			public Enumerator(seq349_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq350_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq350_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq350_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq350_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq351_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq351_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq351_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq351_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq351_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq352_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq352_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq352_cond_box closure;
			public Enumerator(seq352_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq353_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq353_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq353_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq353_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq354_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq354_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq354_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq354_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq354_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq355_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq355_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq355_cond_box closure;
			public Enumerator(seq355_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq356_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq356_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq356_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq356_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq357_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq357_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq357_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq357_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq357_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq358_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq358_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq358_cond_box closure;
			public Enumerator(seq358_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq359_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq359_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq359_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq359_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq360_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq360_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq360_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq360_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq360_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq361_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq361_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq361_cond_box closure;
			public Enumerator(seq361_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq362_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq362_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq362_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq362_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq363_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq363_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq363_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq363_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq363_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq364_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq364_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq364_cond_box closure;
			public Enumerator(seq364_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq365_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq365_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq365_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq365_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq366_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq366_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq366_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq366_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq366_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq367_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq367_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq367_cond_box closure;
			public Enumerator(seq367_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq368_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq368_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq368_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq368_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq369_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq369_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq369_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq369_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq369_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq370_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq370_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq370_cond_box closure;
			public Enumerator(seq370_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq371_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq371_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq371_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq371_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq372_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq372_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq372_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq372_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq372_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq373_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq373_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq373_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq373_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Job"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq374_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq374_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq374_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq374_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq374_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq375_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq375_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq375_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq375_join closure;
			public Enumerator(seq375_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			public Enumerator(seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq377_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq378_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq380_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq381_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq383_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq384_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq386_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq387_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq389_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq390_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq392_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq393_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq395_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq396_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq398_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq399_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq401_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq402_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq404_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq405_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq407_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq408_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq410_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq411_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq413_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq414_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq416_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq417_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq419_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq420_map(var16_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq422_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq376_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq377_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq377_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq377_cond_box closure;
			public Enumerator(seq377_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq378_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq378_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq378_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq378_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq379_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq379_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq379_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq379_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq379_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq380_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq380_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq380_cond_box closure;
			public Enumerator(seq380_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq381_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq381_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq381_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq381_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq382_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq382_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq382_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq382_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq382_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq383_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq383_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq383_cond_box closure;
			public Enumerator(seq383_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq384_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq384_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq384_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq384_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq385_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq385_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq385_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq385_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq385_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq386_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq386_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq386_cond_box closure;
			public Enumerator(seq386_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq387_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq387_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq387_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq387_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq388_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq388_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq388_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq388_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq388_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq389_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq389_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq389_cond_box closure;
			public Enumerator(seq389_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq390_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq390_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq390_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq390_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq391_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq391_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq391_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq391_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq391_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq392_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq392_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq392_cond_box closure;
			public Enumerator(seq392_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq393_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq393_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq393_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq393_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq394_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq394_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq394_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq394_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq394_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq395_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq395_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq395_cond_box closure;
			public Enumerator(seq395_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq396_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq396_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq396_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq396_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq397_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq397_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq397_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq397_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq397_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq398_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq398_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq398_cond_box closure;
			public Enumerator(seq398_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq399_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq399_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq399_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq399_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq400_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq400_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq400_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq400_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq400_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq401_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq401_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq401_cond_box closure;
			public Enumerator(seq401_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq402_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq402_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq402_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq402_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq403_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq403_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq403_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq403_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq403_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq404_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq404_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq404_cond_box closure;
			public Enumerator(seq404_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq405_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq405_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq405_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq405_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq406_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq406_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq406_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq406_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq406_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq407_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq407_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq407_cond_box closure;
			public Enumerator(seq407_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq408_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq408_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq408_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq408_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq409_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq409_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq409_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq409_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq409_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq410_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq410_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq410_cond_box closure;
			public Enumerator(seq410_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq411_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq411_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq411_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq411_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq412_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq412_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq412_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq412_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq412_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq413_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq413_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq413_cond_box closure;
			public Enumerator(seq413_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq414_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq414_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq414_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq414_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq415_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq415_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq415_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq415_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq415_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq416_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq416_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq416_cond_box closure;
			public Enumerator(seq416_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq417_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq417_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq417_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq417_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq418_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq418_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq418_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq418_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq418_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq419_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq419_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq419_cond_box closure;
			public Enumerator(seq419_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq420_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq420_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq420_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq420_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq421_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq421_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq421_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq421_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq421_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq422_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq422_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq422_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq422_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Impact"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq423_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq423_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq423_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq423_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq423_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq424_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq424_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq424_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq424_join closure;
			public Enumerator(seq424_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			com.altova.mapforce.IEnumerable var17_cond_box;
			public Enumerator(seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq426_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq427_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq429_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq430_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq432_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq433_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq435_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq436_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq438_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq439_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq441_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq442_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq444_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq445_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq447_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq448_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq450_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq451_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq453_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq454_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq456_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq457_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq459_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq460_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq462_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq463_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq465_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq466_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq468_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq469_map(var16_cond_box))))) {state = 30; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var17_cond_box = new com.altova.functions.Core.SequenceCache((new seq471_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq472_map(var17_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq474_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq425_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq426_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq426_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq426_cond_box closure;
			public Enumerator(seq426_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq427_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq427_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq427_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq427_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq428_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq428_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq428_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq428_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq428_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq429_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq429_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq429_cond_box closure;
			public Enumerator(seq429_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq430_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq430_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq430_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq430_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq431_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq431_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq431_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq431_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq431_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq432_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq432_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq432_cond_box closure;
			public Enumerator(seq432_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq433_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq433_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq433_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq433_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq434_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq434_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq434_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq434_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq434_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq435_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq435_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq435_cond_box closure;
			public Enumerator(seq435_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq436_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq436_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq436_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq436_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq437_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq437_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq437_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq437_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq437_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq438_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq438_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq438_cond_box closure;
			public Enumerator(seq438_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq439_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq439_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq439_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq439_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq440_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq440_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq440_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq440_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq440_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq441_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq441_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq441_cond_box closure;
			public Enumerator(seq441_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq442_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq442_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq442_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq442_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq443_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq443_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq443_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq443_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq443_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq444_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq444_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq444_cond_box closure;
			public Enumerator(seq444_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq445_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq445_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq445_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq445_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq446_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq446_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq446_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq446_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq446_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq447_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq447_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq447_cond_box closure;
			public Enumerator(seq447_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq448_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq448_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq448_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq448_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq449_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq449_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq449_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq449_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq449_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq450_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq450_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq450_cond_box closure;
			public Enumerator(seq450_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq451_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq451_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq451_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq451_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq452_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq452_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq452_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq452_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq452_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq453_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq453_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq453_cond_box closure;
			public Enumerator(seq453_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq454_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq454_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq454_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq454_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq455_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq455_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq455_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq455_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq455_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq456_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq456_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq456_cond_box closure;
			public Enumerator(seq456_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq457_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq457_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq457_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq457_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq458_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq458_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq458_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq458_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq458_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq459_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq459_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq459_cond_box closure;
			public Enumerator(seq459_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq460_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq460_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq460_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq460_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq461_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq461_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq461_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq461_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq461_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq462_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq462_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq462_cond_box closure;
			public Enumerator(seq462_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq463_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq463_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq463_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq463_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq464_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq464_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq464_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq464_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq464_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq465_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq465_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq465_cond_box closure;
			public Enumerator(seq465_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq466_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq466_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq466_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq466_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq467_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq467_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq467_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq467_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq467_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq468_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq468_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq468_cond_box closure;
			public Enumerator(seq468_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq469_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq469_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq469_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq469_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq470_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq470_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq470_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq470_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq470_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq471_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq471_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq471_cond_box closure;
			public Enumerator(seq471_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq472_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq472_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq472_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq472_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq473_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq473_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq473_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq473_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq473_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Document"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq474_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq474_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq474_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq474_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Document"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq475_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq475_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq475_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq475_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq475_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq476_join(closure.var1_current, ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq476_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq476_join(com.altova.mapforce.IMFNode var1_current, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_current = var1_current;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq476_join closure;
			public Enumerator(seq476_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Hidden", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Hidden", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var2_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			com.altova.mapforce.IEnumerable var17_cond_box;
			com.altova.mapforce.IEnumerable var18_cond_box;
			public Enumerator(seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq478_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq479_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq481_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq482_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq484_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq485_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq487_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq488_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq490_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq491_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq493_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq494_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq496_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq497_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq499_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq500_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq502_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq503_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq505_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq506_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq508_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq509_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq511_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq512_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq514_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq515_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq517_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq518_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq520_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq521_map(var16_cond_box))))) {state = 30; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var17_cond_box = new com.altova.functions.Core.SequenceCache((new seq523_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq524_map(var17_cond_box))))) {state = 32; return false; }
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var18_cond_box = new com.altova.functions.Core.SequenceCache((new seq526_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq527_map(var18_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq529_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq477_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq478_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq478_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq478_cond_box closure;
			public Enumerator(seq478_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq479_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq479_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq479_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq479_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq480_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq480_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq480_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq480_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq480_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq481_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq481_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq481_cond_box closure;
			public Enumerator(seq481_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq482_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq482_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq482_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq482_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq483_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq483_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq483_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq483_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq483_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq484_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq484_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq484_cond_box closure;
			public Enumerator(seq484_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq485_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq485_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq485_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq485_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq486_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq486_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq486_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq486_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq486_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq487_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq487_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq487_cond_box closure;
			public Enumerator(seq487_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq488_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq488_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq488_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq488_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq489_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq489_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq489_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq489_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq489_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq490_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq490_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq490_cond_box closure;
			public Enumerator(seq490_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq491_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq491_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq491_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq491_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq492_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq492_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq492_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq492_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq492_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq493_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq493_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq493_cond_box closure;
			public Enumerator(seq493_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq494_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq494_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq494_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq494_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq495_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq495_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq495_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq495_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq495_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq496_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq496_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq496_cond_box closure;
			public Enumerator(seq496_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq497_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq497_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq497_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq497_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq498_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq498_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq498_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq498_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq498_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq499_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq499_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq499_cond_box closure;
			public Enumerator(seq499_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq500_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq500_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq500_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq500_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq501_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq501_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq501_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq501_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq501_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq502_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq502_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq502_cond_box closure;
			public Enumerator(seq502_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq503_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq503_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq503_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq503_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq504_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq504_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq504_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq504_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq504_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq505_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq505_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq505_cond_box closure;
			public Enumerator(seq505_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq506_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq506_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq506_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq506_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq507_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq507_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq507_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq507_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq507_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq508_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq508_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq508_cond_box closure;
			public Enumerator(seq508_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq509_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq509_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq509_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq509_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq510_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq510_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq510_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq510_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq510_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq511_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq511_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq511_cond_box closure;
			public Enumerator(seq511_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq512_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq512_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq512_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq512_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq513_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq513_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq513_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq513_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq513_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq514_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq514_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq514_cond_box closure;
			public Enumerator(seq514_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq515_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq515_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq515_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq515_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq516_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq516_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq516_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq516_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq516_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq517_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq517_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq517_cond_box closure;
			public Enumerator(seq517_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq518_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq518_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq518_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq518_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq519_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq519_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq519_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq519_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq519_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq520_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq520_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq520_cond_box closure;
			public Enumerator(seq520_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq521_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq521_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq521_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq521_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq522_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq522_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq522_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq522_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq522_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq523_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq523_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq523_cond_box closure;
			public Enumerator(seq523_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq524_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq524_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq524_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq524_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq525_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq525_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq525_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq525_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq525_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Document"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq526_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq526_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq526_cond_box closure;
			public Enumerator(seq526_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq527_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq527_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq527_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq527_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq528_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq528_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq528_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq528_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq528_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Attribute"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq529_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq529_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq529_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq529_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Attribute"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq530_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq530_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq530_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq530_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq530_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq531_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq531_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq531_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq531_join closure;
			public Enumerator(seq531_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			com.altova.mapforce.IEnumerable var17_cond_box;
			com.altova.mapforce.IEnumerable var18_cond_box;
			com.altova.mapforce.IEnumerable var19_cond_box;
			public Enumerator(seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq533_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq534_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq536_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq537_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq539_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq540_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq542_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq543_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq545_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq546_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq548_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq549_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq551_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq552_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq554_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq555_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq557_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq558_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq560_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq561_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq563_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq564_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq566_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq567_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq569_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq570_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq572_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq573_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq575_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq576_map(var16_cond_box))))) {state = 30; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var17_cond_box = new com.altova.functions.Core.SequenceCache((new seq578_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq579_map(var17_cond_box))))) {state = 32; return false; }
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var18_cond_box = new com.altova.functions.Core.SequenceCache((new seq581_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq582_map(var18_cond_box))))) {state = 34; return false; }
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 0;				
				var19_cond_box = new com.altova.functions.Core.SequenceCache((new seq584_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq585_map(var19_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq587_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq532_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq533_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq533_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq533_cond_box closure;
			public Enumerator(seq533_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq534_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq534_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq534_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq534_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq535_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq535_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq535_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq535_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq535_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq536_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq536_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq536_cond_box closure;
			public Enumerator(seq536_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq537_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq537_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq537_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq537_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq538_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq538_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq538_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq538_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq538_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq539_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq539_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq539_cond_box closure;
			public Enumerator(seq539_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq540_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq540_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq540_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq540_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq541_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq541_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq541_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq541_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq541_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq542_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq542_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq542_cond_box closure;
			public Enumerator(seq542_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq543_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq543_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq543_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq543_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq544_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq544_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq544_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq544_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq544_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq545_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq545_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq545_cond_box closure;
			public Enumerator(seq545_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq546_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq546_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq546_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq546_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq547_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq547_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq547_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq547_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq547_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq548_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq548_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq548_cond_box closure;
			public Enumerator(seq548_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq549_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq549_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq549_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq549_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq550_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq550_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq550_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq550_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq550_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq551_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq551_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq551_cond_box closure;
			public Enumerator(seq551_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq552_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq552_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq552_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq552_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq553_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq553_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq553_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq553_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq553_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq554_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq554_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq554_cond_box closure;
			public Enumerator(seq554_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq555_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq555_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq555_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq555_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq556_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq556_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq556_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq556_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq556_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq557_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq557_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq557_cond_box closure;
			public Enumerator(seq557_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq558_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq558_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq558_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq558_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq559_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq559_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq559_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq559_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq559_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq560_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq560_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq560_cond_box closure;
			public Enumerator(seq560_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq561_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq561_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq561_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq561_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq562_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq562_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq562_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq562_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq562_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq563_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq563_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq563_cond_box closure;
			public Enumerator(seq563_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq564_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq564_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq564_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq564_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq565_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq565_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq565_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq565_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq565_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq566_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq566_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq566_cond_box closure;
			public Enumerator(seq566_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq567_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq567_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq567_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq567_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq568_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq568_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq568_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq568_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq568_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq569_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq569_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq569_cond_box closure;
			public Enumerator(seq569_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq570_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq570_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq570_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq570_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq571_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq571_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq571_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq571_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq571_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq572_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq572_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq572_cond_box closure;
			public Enumerator(seq572_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq573_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq573_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq573_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq573_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq574_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq574_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq574_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq574_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq574_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq575_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq575_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq575_cond_box closure;
			public Enumerator(seq575_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq576_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq576_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq576_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq576_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq577_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq577_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq577_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq577_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq577_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq578_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq578_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq578_cond_box closure;
			public Enumerator(seq578_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq579_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq579_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq579_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq579_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq580_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq580_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq580_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq580_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq580_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Document"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq581_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq581_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq581_cond_box closure;
			public Enumerator(seq581_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq582_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq582_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq582_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq582_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq583_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq583_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq583_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq583_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq583_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Attribute"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq584_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq584_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq584_cond_box closure;
			public Enumerator(seq584_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq585_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq585_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq585_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq585_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq586_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq586_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq586_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq586_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq586_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Coordinate"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq587_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq587_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq587_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq587_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Coordinate"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq588_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq588_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq588_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq588_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq588_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq589_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq589_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq589_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq589_join closure;
			public Enumerator(seq589_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			com.altova.mapforce.IEnumerable var17_cond_box;
			com.altova.mapforce.IEnumerable var18_cond_box;
			com.altova.mapforce.IEnumerable var19_cond_box;
			com.altova.mapforce.IEnumerable var20_cond_box;
			public Enumerator(seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq591_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq592_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq594_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq595_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq597_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq598_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq600_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq601_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq603_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq604_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq606_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq607_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq609_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq610_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq612_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq613_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq615_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq616_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq618_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq619_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq621_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq622_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq624_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq625_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq627_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq628_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq630_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq631_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq633_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq634_map(var16_cond_box))))) {state = 30; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var17_cond_box = new com.altova.functions.Core.SequenceCache((new seq636_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq637_map(var17_cond_box))))) {state = 32; return false; }
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var18_cond_box = new com.altova.functions.Core.SequenceCache((new seq639_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq640_map(var18_cond_box))))) {state = 34; return false; }
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 0;				
				var19_cond_box = new com.altova.functions.Core.SequenceCache((new seq642_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq643_map(var19_cond_box))))) {state = 36; return false; }
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 0;				
				var20_cond_box = new com.altova.functions.Core.SequenceCache((new seq645_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq646_map(var20_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq648_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq590_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq591_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq591_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq591_cond_box closure;
			public Enumerator(seq591_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq592_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq592_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq592_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq592_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq593_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq593_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq593_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq593_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq593_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq594_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq594_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq594_cond_box closure;
			public Enumerator(seq594_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq595_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq595_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq595_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq595_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq596_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq596_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq596_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq596_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq596_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq597_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq597_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq597_cond_box closure;
			public Enumerator(seq597_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq598_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq598_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq598_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq598_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq599_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq599_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq599_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq599_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq599_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq600_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq600_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq600_cond_box closure;
			public Enumerator(seq600_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq601_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq601_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq601_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq601_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq602_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq602_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq602_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq602_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq602_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq603_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq603_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq603_cond_box closure;
			public Enumerator(seq603_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq604_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq604_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq604_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq604_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq605_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq605_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq605_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq605_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq605_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq606_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq606_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq606_cond_box closure;
			public Enumerator(seq606_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq607_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq607_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq607_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq607_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq608_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq608_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq608_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq608_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq608_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq609_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq609_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq609_cond_box closure;
			public Enumerator(seq609_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq610_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq610_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq610_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq610_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq611_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq611_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq611_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq611_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq611_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq612_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq612_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq612_cond_box closure;
			public Enumerator(seq612_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq613_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq613_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq613_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq613_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq614_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq614_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq614_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq614_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq614_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq615_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq615_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq615_cond_box closure;
			public Enumerator(seq615_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq616_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq616_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq616_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq616_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq617_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq617_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq617_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq617_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq617_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq618_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq618_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq618_cond_box closure;
			public Enumerator(seq618_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq619_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq619_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq619_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq619_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq620_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq620_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq620_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq620_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq620_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq621_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq621_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq621_cond_box closure;
			public Enumerator(seq621_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq622_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq622_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq622_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq622_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq623_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq623_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq623_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq623_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq623_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq624_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq624_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq624_cond_box closure;
			public Enumerator(seq624_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq625_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq625_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq625_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq625_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq626_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq626_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq626_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq626_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq626_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq627_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq627_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq627_cond_box closure;
			public Enumerator(seq627_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq628_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq628_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq628_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq628_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq629_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq629_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq629_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq629_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq629_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq630_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq630_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq630_cond_box closure;
			public Enumerator(seq630_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq631_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq631_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq631_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq631_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq632_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq632_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq632_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq632_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq632_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq633_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq633_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq633_cond_box closure;
			public Enumerator(seq633_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq634_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq634_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq634_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq634_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq635_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq635_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq635_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq635_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq635_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq636_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq636_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq636_cond_box closure;
			public Enumerator(seq636_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq637_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq637_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq637_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq637_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq638_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq638_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq638_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq638_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq638_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Document"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq639_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq639_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq639_cond_box closure;
			public Enumerator(seq639_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq640_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq640_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq640_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq640_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq641_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq641_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq641_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq641_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq641_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Attribute"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq642_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq642_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq642_cond_box closure;
			public Enumerator(seq642_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq643_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq643_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq643_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq643_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq644_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq644_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq644_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq644_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq644_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Coordinate"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq645_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq645_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq645_cond_box closure;
			public Enumerator(seq645_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq646_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq646_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq646_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq646_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq647_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq647_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq647_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq647_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq647_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Issue"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq648_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq648_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq648_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq648_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("Issue"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq649_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq649_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq649_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq649_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq649_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq650_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq650_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq650_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq650_join closure;
			public Enumerator(seq650_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure;
			com.altova.mapforce.IEnumerable var2_cond_box;
			com.altova.mapforce.IEnumerable var3_cond_box;
			com.altova.mapforce.IEnumerable var4_cond_box;
			com.altova.mapforce.IEnumerable var5_cond_box;
			com.altova.mapforce.IEnumerable var6_cond_box;
			com.altova.mapforce.IEnumerable var7_cond_box;
			com.altova.mapforce.IEnumerable var8_cond_box;
			com.altova.mapforce.IEnumerable var9_cond_box;
			com.altova.mapforce.IEnumerable var10_cond_box;
			com.altova.mapforce.IEnumerable var11_cond_box;
			com.altova.mapforce.IEnumerable var12_cond_box;
			com.altova.mapforce.IEnumerable var13_cond_box;
			com.altova.mapforce.IEnumerable var14_cond_box;
			com.altova.mapforce.IEnumerable var15_cond_box;
			com.altova.mapforce.IEnumerable var16_cond_box;
			com.altova.mapforce.IEnumerable var17_cond_box;
			com.altova.mapforce.IEnumerable var18_cond_box;
			com.altova.mapforce.IEnumerable var19_cond_box;
			com.altova.mapforce.IEnumerable var20_cond_box;
			com.altova.mapforce.IEnumerable var21_cond_box;
			public Enumerator(seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_cond_box = new com.altova.functions.Core.SequenceCache((new seq652_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq653_map(var2_cond_box))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var3_cond_box = new com.altova.functions.Core.SequenceCache((new seq655_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq656_map(var3_cond_box))))) {state = 4; return false; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_cond_box = new com.altova.functions.Core.SequenceCache((new seq658_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq659_map(var4_cond_box))))) {state = 6; return false; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var5_cond_box = new com.altova.functions.Core.SequenceCache((new seq661_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq662_map(var5_cond_box))))) {state = 8; return false; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var6_cond_box = new com.altova.functions.Core.SequenceCache((new seq664_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq665_map(var6_cond_box))))) {state = 10; return false; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 0;				
				var7_cond_box = new com.altova.functions.Core.SequenceCache((new seq667_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq668_map(var7_cond_box))))) {state = 12; return false; }
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 0;				
				var8_cond_box = new com.altova.functions.Core.SequenceCache((new seq670_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq671_map(var8_cond_box))))) {state = 14; return false; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var9_cond_box = new com.altova.functions.Core.SequenceCache((new seq673_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq674_map(var9_cond_box))))) {state = 16; return false; }
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 0;				
				var10_cond_box = new com.altova.functions.Core.SequenceCache((new seq676_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq677_map(var10_cond_box))))) {state = 18; return false; }
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				var11_cond_box = new com.altova.functions.Core.SequenceCache((new seq679_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq680_map(var11_cond_box))))) {state = 20; return false; }
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 0;				
				var12_cond_box = new com.altova.functions.Core.SequenceCache((new seq682_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq683_map(var12_cond_box))))) {state = 22; return false; }
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var13_cond_box = new com.altova.functions.Core.SequenceCache((new seq685_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq686_map(var13_cond_box))))) {state = 24; return false; }
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 0;				
				var14_cond_box = new com.altova.functions.Core.SequenceCache((new seq688_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq689_map(var14_cond_box))))) {state = 26; return false; }
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 0;				
				var15_cond_box = new com.altova.functions.Core.SequenceCache((new seq691_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq692_map(var15_cond_box))))) {state = 28; return false; }
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 0;				
				var16_cond_box = new com.altova.functions.Core.SequenceCache((new seq694_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq695_map(var16_cond_box))))) {state = 30; return false; }
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 0;				
				var17_cond_box = new com.altova.functions.Core.SequenceCache((new seq697_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq698_map(var17_cond_box))))) {state = 32; return false; }
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 0;				
				var18_cond_box = new com.altova.functions.Core.SequenceCache((new seq700_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq701_map(var18_cond_box))))) {state = 34; return false; }
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 0;				
				var19_cond_box = new com.altova.functions.Core.SequenceCache((new seq703_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq704_map(var19_cond_box))))) {state = 36; return false; }
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 0;				
				var20_cond_box = new com.altova.functions.Core.SequenceCache((new seq706_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq707_map(var20_cond_box))))) {state = 38; return false; }
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 0;				
				var21_cond_box = new com.altova.functions.Core.SequenceCache((new seq709_cond_box(closure.var1_current)));
				if (!(com.altova.functions.Core.exists((new seq710_map(var21_cond_box))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Worksheet", ""), (new seq712_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box_lambda() {}
		
		public Object invoke(Object o) { return new seq651_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_cond_box((com.altova.mapforce.IMFNode) o); }	
	}
	static class seq652_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq652_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq652_cond_box closure;
			public Enumerator(seq652_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq653_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq653_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq653_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq653_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq654_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq654_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq654_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq654_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq654_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Instruction"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq655_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq655_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq655_cond_box closure;
			public Enumerator(seq655_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq656_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq656_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq656_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq656_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq657_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq657_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq657_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq657_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq657_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Contact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq658_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq658_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq658_cond_box closure;
			public Enumerator(seq658_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq659_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq659_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq659_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq659_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq660_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq660_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq660_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq660_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq660_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Facility"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq661_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq661_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq661_cond_box closure;
			public Enumerator(seq661_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq662_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq662_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq662_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq662_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq663_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq663_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq663_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq663_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq663_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Floor"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq664_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq664_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq664_cond_box closure;
			public Enumerator(seq664_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq665_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq665_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq665_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq665_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq666_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq666_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq666_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq666_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq666_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Space"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq667_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq667_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq667_cond_box closure;
			public Enumerator(seq667_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq668_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq668_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq668_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq668_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq669_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq669_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq669_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq669_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq669_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Zone"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq670_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq670_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq670_cond_box closure;
			public Enumerator(seq670_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq671_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq671_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq671_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq671_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq672_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq672_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq672_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq672_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq672_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Type"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq673_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq673_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq673_cond_box closure;
			public Enumerator(seq673_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq674_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq674_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq674_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq674_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq675_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq675_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq675_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq675_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq675_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Component"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq676_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq676_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq676_cond_box closure;
			public Enumerator(seq676_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq677_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq677_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq677_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq677_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq678_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq678_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq678_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq678_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq678_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "System"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq679_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq679_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq679_cond_box closure;
			public Enumerator(seq679_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq680_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq680_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq680_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq680_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq681_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq681_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq681_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq681_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq681_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Assembly"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq682_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq682_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq682_cond_box closure;
			public Enumerator(seq682_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq683_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq683_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq683_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq683_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq684_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq684_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq684_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq684_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq684_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Connection"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq685_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq685_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq685_cond_box closure;
			public Enumerator(seq685_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq686_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq686_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq686_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq686_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq687_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq687_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq687_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq687_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq687_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Spare"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq688_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq688_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq688_cond_box closure;
			public Enumerator(seq688_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq689_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq689_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq689_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq689_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq690_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq690_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq690_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq690_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq690_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Resource"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq691_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq691_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq691_cond_box closure;
			public Enumerator(seq691_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq692_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq692_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq692_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq692_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq693_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq693_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq693_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq693_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq693_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Job"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq694_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq694_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq694_cond_box closure;
			public Enumerator(seq694_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq695_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq695_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq695_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq695_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq696_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq696_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq696_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq696_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq696_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Impact"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq697_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq697_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq697_cond_box closure;
			public Enumerator(seq697_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq698_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq698_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq698_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq698_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq699_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq699_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq699_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq699_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq699_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Document"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq700_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq700_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq700_cond_box closure;
			public Enumerator(seq700_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq701_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq701_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq701_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq701_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq702_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq702_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq702_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq702_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq702_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Attribute"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq703_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq703_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq703_cond_box closure;
			public Enumerator(seq703_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq704_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq704_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq704_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq704_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq705_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq705_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq705_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq705_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq705_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Coordinate"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq706_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq706_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq706_cond_box closure;
			public Enumerator(seq706_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq707_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq707_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq707_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq707_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq708_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq708_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq708_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq708_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq708_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "Issue"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq709_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq709_cond_box(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq709_cond_box closure;
			public Enumerator(seq709_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 0; return false; }
				current = com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq710_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq710_map(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq710_map closure;
			IEnumerator var2_filter;
			public Enumerator(seq710_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq711_filter(closure.var1_result))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter.close(); var2_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq711_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_result;
	
		public seq711_filter(com.altova.mapforce.IEnumerable var1_result)
		{
			this.var1_result = var1_result;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq711_filter closure;
			IEnumerator var2_result;
			public Enumerator(seq711_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_result = (closure.var1_result).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_result.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equal(((java.lang.String)(var2_result.current())), "PickLists"))) {state = 2; return false; }
				current = var2_result.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_result.close(); var2_result = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_result.close(); var2_result = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq712_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq712_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq712_join closure;
			IEnumerator var2_filter_elements_qname;
			IEnumerator var3_filter_elements_qname;
			public Enumerator(seq712_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("Name", ""), com.altova.functions.Core.box("PickLists"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("RowMarker", ""), com.altova.functions.Core.box(com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("s", ""), com.altova.functions.Core.box("1"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Table", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements_qname.moveNext()) {state = 5; return false; }
				var3_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", "urn:schemas-microsoft-com:office:spreadsheet"), ((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter_elements_qname.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Row", ""), (new seq713_map(((com.altova.mapforce.IMFNode)(var3_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements_qname.close(); var3_filter_elements_qname = null;
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq713_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq713_map(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq713_map closure;
			IEnumerator var2_filter_elements_qname;
			public Enumerator(seq713_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_qname = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_qname.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Cell", ""), (new seq714_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_qname.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_qname.close(); var2_filter_elements_qname = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq714_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq714_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq714_join closure;
			public Enumerator(seq714_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("t", ""), com.altova.functions.Core.box("s"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current)))) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("n", ""), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Index", "urn:schemas-microsoft-com:office:spreadsheet"), closure.var1_current))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_current);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_SpreadsheetML;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_SpreadsheetML)
		{
			this.var1_instance_SpreadsheetML = var1_instance_SpreadsheetML;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_instance_SpreadsheetML))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_box.close(); var2_box = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_box.close(); var2_box = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node varSpreadsheetML2Instance;

	public void run(String SpreadsheetML2SourceFilename, String XLSXTargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + SpreadsheetML2SourceFilename + "...\n");
		com.altova.io.FileInput SpreadsheetML2Source = new com.altova.io.FileInput(SpreadsheetML2SourceFilename);
		// open target stream
		com.altova.io.FileOutput XLSXTarget = new com.altova.io.FileOutput(XLSXTargetFilename);

		// run
		run(SpreadsheetML2Source, XLSXTarget);

		// close source streams
		SpreadsheetML2Source.close();
		// close target stream
		writeTrace("Saving " + XLSXTargetFilename + "...\n");
		XLSXTarget.close();
	}


	// main entry point

	public void run(com.altova.io.Input SpreadsheetML2Source, com.altova.io.Output XLSXTarget) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_SpreadsheetML2 = XmlTreeOperations.loadDocument(SpreadsheetML2Source);
		varSpreadsheetML2Instance = doc_SpreadsheetML2;
		if (runDoesCloseAll)
			SpreadsheetML2Source.close();

		// Create the target
		org.w3c.dom.Document XLSXDoc = (XLSXTarget.getType() == com.altova.io.Output.IO_DOM) ? XLSXTarget.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varSpreadsheetML2Instance, SpreadsheetML2Source.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, XLSXDoc);
		// Close the target
		// xlsx
		com.altova.xml.XLSXFileWriter xlsxWriter = new com.altova.xml.XLSXFileWriter(XLSXTarget, XLSXDoc);
		xlsxWriter.run();

		
		if (runDoesCloseAll)
		{
			SpreadsheetML2Source.close();
			XLSXTarget.close();
		}
	}



}
